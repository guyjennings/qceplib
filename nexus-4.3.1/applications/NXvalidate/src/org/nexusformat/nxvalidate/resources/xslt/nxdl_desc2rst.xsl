<?xml version="1.0" encoding="UTF-8"?>

<!--
########### SVN repository information ###################
# $Date: 2012-09-19 17:02:54 +0100 (Wed, 19 Sep 2012) $
# $Author: Freddie Akeroyd $
# $Revision: 1130 $
# $HeadURL: http://svn.nexusformat.org/definitions/trunk/xslt/nxdl_desc2rst.xsl $
# $Id: nxdl_desc2rst.xsl 1130 2012-09-19 16:02:54Z Freddie Akeroyd $
########### SVN repository information ###################

Purpose:
	This stylesheet is used to extract the specifications of 
	valid types categories from the NeXus Definition Language
	specifications into DocBook content for use in NXDL.xml.

Usage:
    xsltproc ../xslt/nxdl_desc2docbook.xsl ../nxdlTypes.xsd > types.xml
-->

<xslt:stylesheet
	xmlns:xslt="http://www.w3.org/1999/XSL/Transform"
	version="1.0"
	xmlns:nxdl="http://definition.nexusformat.org/nxdl/3.1"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:db="http://docbook.org/ns/docbook"
    >
    <xslt:output method="xml" indent="yes" version="1.0" encoding="UTF-8"/>

    <xslt:template match="/">
        <!-- Needs this on 2nd line of XML file: 
            <?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
        -->
        <xslt:processing-instruction name="oxygen"
            >RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"</xslt:processing-instruction>
        <xslt:comment/><!-- tricks XSLT to start a new line -->
        <xslt:comment/><!-- tricks XSLT to start a new line -->
        <xslt:comment/><!-- tricks XSLT to start a new line -->
        
        <xslt:comment>###########################################################</xslt:comment>
        <xslt:comment>######    This XML file was auto-generated from      ######</xslt:comment>
        <xslt:comment>######    nxdl.xsd file by an XSLT transformation.   ######</xslt:comment>
        <xslt:comment>######    Do NOT edit this DocBook XML file.         ######</xslt:comment>
        <xslt:comment>###########################################################</xslt:comment>
        
        <xslt:comment>There has been no effort to make this file easy to read for humans.</xslt:comment>
        
        <xslt:comment/><!-- tricks XSLT to start a new line -->
        
        <xslt:comment>
# NeXus - Neutron and X-ray Common Data Format
# 
# Copyright (C) 2008-2012 NeXus International Advisory Committee (NIAC)
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# For further information, see http://www.nexusformat.org
        </xslt:comment>
        
        <xslt:comment/><!-- tricks XSLT to start a new line -->


        <xslt:element name="section">
            <xslt:attribute name="xmlns">http://docbook.org/ns/docbook</xslt:attribute>
            <xslt:comment> auto-generated by a script </xslt:comment>
            <title>NXDL Elements and Data Types</title>
            <para>
                The documentation in this section has been obtained directly 
                from the <code>nxdl.xsd</code> NXDL Schema.
                First, the basic elements are defined in alphabetical order.  
                Attributes to an element are indicated immediately following the element
                and are preceded with an "@" symbol, such as
                <emphasis role="bold">@attribute</emphasis>.
                Then, the common data types used within the NXDL specification are defined.
                Pay particular attention to the rules for <code>validItemName</code>
                and  <code>validNXClassName</code>.
            </para>
            
            <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
            <!--
                2010-11-29,PRJ:
                This contains a lot of special case code to lay out the NXDL chapter.
                It could be cleaner but that would also involve some cooperation on 
                anyone who edits nxdl.xsd which is sure to break.  The special case ensures
                the parts come out in the chosen order.  BUT, it is possible that new
                items in nxdl.xsd will not automatically go in the manual.
                Can this be streamlined with some common methods?
                Also, there is probably too much documentation in nxdl.xsd.  Obscures the function.
            -->
            <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
            
            <section>
                <title>NXDL element: <code>attribute</code> </title>
                <para>
                    An <code>attribute</code> element can <emphasis>only</emphasis> be a child of a 
                    <literal>field</literal> or <literal>group</literal> element.
                    It is used to define <emphasis>attribute</emphasis>s to be used and their data types
                    and possibly an enumeration of allowed values.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>attribute</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">attribute</xslt:with-param>
                    </xslt:call-template>
                </para>
                <variablelist>
                     <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='attributeType']" />
                </variablelist>
            </section>
            
            <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

            <section>
                <title>NXDL element: <code>definition</code> </title>
                <para>
                    A <code>definition</code> element can <emphasis>only</emphasis> be used
                    at the root level of an NXDL specification.
                    Note:  Due to the large number of attributes of the <code>definition</code> element,
                    they have been omitted from the figure below.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>definition</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">definition</xslt:with-param>
                    </xslt:call-template>
                </para>
                <variablelist>
                    <xslt:apply-templates select="/xsd:schema//xsd:element[@name='definition']" />
                    <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='definitionType']" />
                    <xslt:apply-templates select="/xsd:schema//xsd:simpleType[@name='definitionTypeAttr']" />
                </variablelist>
            </section>
            
            <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
            
            <section>
                <title>NXDL element: <code>dimensions</code> </title>
                <para>
                    The <code>dimensions</code> element describes the <emphasis>shape</emphasis> of an array.
                    It is used <emphasis>only</emphasis> as a child of a <literal>field</literal> element.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>dimensions</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">dimensions</xslt:with-param>
                    </xslt:call-template>
                </para>
                <variablelist>
                    <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='dimensionsType']" />
                </variablelist>
            </section>
            
            <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
            
            <section>
                <title>NXDL element: <code>doc</code> </title>
                <para>
                    A <code>doc</code> element can be a child of most NXDL elements.  In most cases, the
                    content of the <code>doc</code> element will also become part of the NeXus manual.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>doc</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">doc</xslt:with-param>
                    </xslt:call-template>
                </para>
                <variablelist>
                <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='docType']" />
                <varlistentry>
                    <term>element: <emphasis>any</emphasis></term>
                    <listitem>
                         <para>
                             In documentation with DocBook markup tags, it may be useful to
                             use an element that is not directly specified by the NXDL language. 
                             The <emphasis>any</emphasis> element here says that one can use any element
                             at all in a <code>doc</code> element and NXDL will not process it but pass it through.
                             
                             When DocBook markup is used,
                             be sure to use the provided DocBook namespace prefix 
                             (<code>db:</code>) for any DocBook elements,
                             such as this example:
                             <programlisting language="xml"
                                 >&lt;doc&gt;&lt;db:para&gt;this is documentation with DocBook markup&lt;/db:para&gt;&lt;/doc&gt;</programlisting>
                         </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
            </section>
            
            <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
            
            <section>
                <title>NXDL element: <code>enumeration</code></title>
                <para>
                    An <code>enumeration</code> element can <emphasis>only</emphasis> be a child of a 
                    <literal>field</literal> or <literal>attribute</literal> element.
                    It is used to restrict the available choices to a predefined list,
                    such as to control varieties in spelling of a controversial word (such as
                    <emphasis>metre</emphasis> vs. <emphasis>meter</emphasis>).
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>enumeration</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">enumeration</xslt:with-param>
                    </xslt:call-template>
                </para>
                <variablelist>
                    <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='enumerationType']" />
                </variablelist>
            </section>
            
            <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
            
            <section>
                <title>NXDL element: <code>field</code></title>
                <para>
                    The <code>field</code> element provides the value of a named item.  Many different attributes
                    are available to further define the <code>field</code>.  Some of the attributes are not
                    allowed to be used together (such as <code>axes</code> and <code>axis</code>); see the documentation
                    of each for details.
                    It is used <emphasis>only</emphasis> as a child of a <literal>group</literal> element.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>field</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">field</xslt:with-param>
                    </xslt:call-template>
                    Note:  Due to the large number of attributes of the <code>field</code> element,
                    they have been omitted from the figure below.
                </para>
                <variablelist>
                    <xslt:apply-templates 
select="/xsd:schema//xsd:complexType[@name='fieldType']/xsd:complexContent/xsd:extension//xsd:attribute" />
                    <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='fieldType']" />
                    <xslt:apply-templates 
select="/xsd:schema//xsd:complexType[@name='fieldType']/xsd:complexContent/xsd:extension/xsd:sequence//xsd:element" />
                </variablelist>
            </section>
            
            <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
            
            <section>
                <title>NXDL element: <code>group</code></title>
                <para>
                    A <code>group</code> element can <emphasis>only</emphasis> be a child of a 
                    <literal>definition</literal> or <literal>group</literal> element.
                    It describes a common level of organization in a NeXus data file, similar
                    to a subdirectory in a file directory tree.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>group</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">group</xslt:with-param>
                    </xslt:call-template>
                </para>
                <variablelist>
                     <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='groupType']" />
                     <xslt:apply-templates select="/xsd:schema//xsd:group" />
                </variablelist>
            </section>
            
            <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
            
            <section>
                <title>NXDL element: <code>link</code></title>
                <para>
                    A <code>link</code> element 
                    <indexterm><primary>link</primary></indexterm>
                    <indexterm>
                        <primary>target</primary>
                        <see>link</see>
                    </indexterm>
                    can <emphasis>only</emphasis> be a child of a 
                    <literal>field</literal> or <literal>group</literal> element.
                    It describes the path to the original source of the parent
                    <literal>field</literal> or <literal>group</literal>.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>link</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">link</xslt:with-param>
                    </xslt:call-template>
                </para>
                <variablelist>
                     <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='linkType']" />
                    <xslt:apply-templates 
select="/xsd:schema//xsd:complexType[@name='linkType']/xsd:complexContent/xsd:extension//xsd:attribute" />
                </variablelist>
            </section>
            
            <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
            
            <section>
                <title>NXDL element: <code>symbols</code></title>
                <para>
                    A <code>symbols</code> element can <emphasis>only</emphasis> be a child of a 
                    <literal>definition</literal> element.
                    It defines the array index symbols to be used when defining arrays as
                    <code>field</code> elements with common dimensions and lengths.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>symbols</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">symbols</xslt:with-param>
                    </xslt:call-template>
                </para>
                <variablelist>
                    <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='symbolsType']" />
                </variablelist>
            </section>
            
            <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
            
            <section>
                <title>Common internal data types that define the NXDL language</title>
                <para>
                    Data types that define the NXDL language are described here.
                    These data types are defined in the XSD Schema (<code>nxdl.xsd</code>)
                    and are used in various parts of the Schema to define common structures
                    or to simplify a complicated entry.  While the data types are not intended for
                    use in NXDL specifications, they define structures that may be used in NXDL specifications. 
                </para>
                <variablelist>
                <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='basicComponent']" />
                <xslt:apply-templates select="/xsd:schema//xsd:simpleType[@name='validItemName']" />
                <xslt:apply-templates select="/xsd:schema//xsd:simpleType[@name='validNXClassName']" />
                <xslt:apply-templates select="/xsd:schema//xsd:simpleType[@name='validTargetName']" />
                <xslt:apply-templates select="/xsd:schema//xsd:simpleType[@name='nonNegativeUnbounded']" />
                <varlistentry>
                    <term>The <code>xs:string</code> data type</term>
                        <listitem>
                               <para>
                                   The <code>xs:string</code> data type can contain characters, 
                                   line feeds, carriage returns, and tab characters.
                                   See <uri>http://www.w3schools.com/Schema/schema_dtypes_string.asp</uri> 
                                   for more details.
                               </para>
                        </listitem>
                </varlistentry>
                <varlistentry>
                    <term>The <code>xs:token</code> data type</term>
                    <listitem>
                          <para>
                              The <code>xs:string</code> data type is derived from the 
                              <code>xs:string</code> data type.
                          </para>
                          <para>
                              The <code>xs:token</code> data type also contains characters, 
                              but the XML processor will remove line feeds, carriage returns, tabs, 
                              leading and trailing spaces, and multiple spaces.
                              See <uri>http://www.w3schools.com/Schema/schema_dtypes_string.asp</uri> 
                              for more details.
                          </para>
                    </listitem>
                </varlistentry>
              </variablelist>
            </section>
        </xslt:element>
    </xslt:template>
            
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <xslt:template match="xsd:complexType|xsd:simpleType|xsd:group|xsd:element|xsd:attribute">
        <xslt:if test="count(@name)">
            <xslt:apply-templates select="xsd:attribute"/>
            <varlistentry>
                 <term>
                     <xslt:if test="name()='xs:attribute'">@</xslt:if
                        ><code><xslt:value-of select="@name"/></code>
                     <xslt:choose>
                       <xslt:when test="name()='xs:complexType'"> data type</xslt:when>
                       <xslt:when test="name()='xs:simpleType'"> data type</xslt:when>
                     </xslt:choose>:
                 </term>
                <listitem>
                    <xslt:choose>
                        <xslt:when test="count(xsd:annotation/xsd:documentation/db:para)">
                            <!-- do not provide enclosing <db:para> -->
                            <xslt:apply-templates select="xsd:annotation/xsd:documentation"/>
                            <para>
                              <xslt:apply-templates select="xsd:restriction"/>
                              <xslt:if test="count(xsd:simpleType/xsd:restriction//xsd:enumeration)">
                                  <xslt:apply-templates select="xsd:simpleType/xsd:restriction"/>
                              </xslt:if>
                            </para>
                        </xslt:when>
                        <xslt:otherwise>
                            <para>
                                <xslt:apply-templates select="xsd:annotation/xsd:documentation"/>
                                 <xslt:apply-templates select="xsd:restriction"/>
                                 <xslt:if test="count(xsd:simpleType/xsd:restriction//xsd:enumeration)">
                                     <xslt:apply-templates select="xsd:simpleType/xsd:restriction"/>
                                 </xslt:if>
                            </para>
                        </xslt:otherwise>
                    </xslt:choose>
                </listitem>
            </varlistentry>
            
            <xslt:apply-templates select="xsd:sequence//xsd:element"/>
            <xslt:apply-templates select="xsd:simpleType"/>
            <xslt:apply-templates select="xsd:complexType"/>
            <xslt:apply-templates select="xsd:complexType//xsd:attribute"/>
        </xslt:if>
    </xslt:template>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <xslt:template match="xsd:restriction">
        The value may be any
        <xslt:choose>
            <xslt:when test="count(xsd:pattern)">
                <code><xslt:value-of select="@base"/></code>
                that <emphasis>also</emphasis> matches the regular expression:
                <programlisting language="c"
                    ><xslt:value-of select="xsd:pattern/@value"
                    /></programlisting>
            </xslt:when>
            <xslt:when test="count(xsd:pattern)">
                <code><xslt:value-of select="@base"/></code>
                from this list:
    			<itemizedlist>
    			    <xslt:apply-templates select="xsd:enumeration"/>
    			</itemizedlist>
            </xslt:when>
            <xslt:when test="count(xsd:enumeration)">
                one from this list only: 
    			<itemizedlist>
    			    <xslt:apply-templates select="xsd:enumeration"/>
    			</itemizedlist>
            </xslt:when>
            <xslt:otherwise>
                <code><xslt:value-of select="@base"/></code>.
            </xslt:otherwise>
        </xslt:choose>
    </xslt:template>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <xslt:template match="xsd:enumeration">
        <listitem><para><code><xslt:value-of select="@value"/></code></para></listitem>
    </xslt:template>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <xslt:template name="elementDiagram" mode="typePlot">
        <xslt:param name="short"/>
        <xslt:if test="count($short)">
            <xslt:element name="figure">
              <xslt:attribute name="xml:id"
                  >fig.nxdl.<xslt:value-of select="$short"
                  /></xslt:attribute>
              <title>
                  Graphical representation of the NXDL 
                  <code><xslt:value-of select="$short"/></code> 
                  element
              </title>
              <mediaobject>
                  <imageobject>
                      <xslt:comment> Images of NXDL structure are generated from nxdl.xsd source
                        using the oXygen XML Editor.  Open the nxdl.xsd file and choose the
                        "Design" tab.  Identify the structure to be documented and expand
                        as needed to show the detail.  Right click and select "Save as Image ..."
                        Set the name: "nxdl_<xslt:value-of select="$short"
                              />.jpg" and move the file into the correct location using
                          your operating system's commands.  Commit the revision to version control. </xslt:comment>
                      <xslt:element name="imagedata">
                          <xslt:attribute name="fileref"
                              >img/nxdl/nxdl_<xslt:value-of select="$short"
                              />.jpg</xslt:attribute>
                          <!--<xslt:attribute name="width">200pt</xslt:attribute>-->
                          <!--<xslt:attribute name="scalefit">0</xslt:attribute>-->
                          <xslt:attribute name="scale">50</xslt:attribute>
                      </xslt:element>
                  </imageobject>
              </mediaobject>
            </xslt:element>
        </xslt:if>
    </xslt:template>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <xslt:template match="xsd:documentation">
        <!--<xsl:value-of select="."/>-->
        <!-- xmlns:db="http://docbook.org/ns/docbook" -->
        <xslt:apply-templates />
    </xslt:template>
    
    <!-- default rule: copy any node beneath <nx:doc> -->
    <!-- thanks to: http://stackoverflow.com/questions/1525285/xslt-mixed-content-node -->
    <xslt:template match="xsd:documentation//*">
        <xslt:copy>
            <xslt:copy-of select="@*" />
            <xslt:apply-templates />
        </xslt:copy>
    </xslt:template>

</xslt:stylesheet>
