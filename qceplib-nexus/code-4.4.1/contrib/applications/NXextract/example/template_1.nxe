#==============================================================================
# File: 
#	Multiframes_to_EDF.nxe
#
# @desc	Produce a EDF (ESRF Data Format) file for each image captured in 'multiframe' CCD camera mode
#
# @param dir directory 'Target directory for extracted data' $(_data_extraction_folder_)
# @param header_length number 'EDF file header length' 4096
#
# Usage:
#	nxextractor -t Multiframes_to_EDF.nxe -D dir=<destination directory> [-m <mode>] [-w uid:gid] <NeXus source file>
#
# $Author: poirier $
#
# $Revision: 1.7 $
#==============================================================================

# output to console
>
"%s\n" $(_FILE_NAME_)

# loop other all entries
# variable $(entry) will contain current entry path (ex: '/entry1')
# variable $(entry_name) will contain curren tentry name (ex: 'entry1')
@( entry = [nxs:/<NXentry>/]

	# loop other range [0, n[
	@( i = 0, nxs:$(entry)<NXentry>/<NXinstrument>/<NXdetector>/Frames/data

		# define a new variable
		% image_grp = $(entry)<NXentry>/image#$(i)<NXdata>
		
		# define image name for edf file name using a data bloc named 'image_name'
		( image_name
			"im_%02d" $(i)
		)
		
		# define variable
		% image_full_name = $(entry_name)_$(image_name)

		# Test data dimensions
		?( nxs:$(image_grp)/<SDS-signal>._rank_ = 2

			# Define data bloc for image data
			( binarydata
				# output into this bloc as 2 bytes unsigned integers
				'ui2' nxs:$(image_grp)/<SDS-signal> 
			)
			
			# Define data bloc in memory for EDF header base content
			( edf_header
			
				"EDF_DataBlockID = 1.Image.Psd ;\n"
				"EDF_BinarySize = %s ;\n" $(binarydata_size)
				"EDF_HeaderSize = %s ;\n" $(header_length)
				"ByteOrder = LowByteFirst ;\n"
				"DataType = UnsignedShort ;\n"
				"Dim_1 = %d ;\n" nxs:$(image_grp)/data._size_(1)
				"Dim_2 = %d ;\n" nxs:$(image_grp)/data._size_(2)
				"Title = %s ;\n" $(image_full_name)
				"Time =  ;\n"
				"HeaderID = EH:000001:000000:000000 ;\n"
				"Compression = None ;\n"
				"Image = 1 ;\n"
				"Size = %s ;\n" $(binarydata_size)
			)

			# Define data bloc for specific metadata
			( specific_metadata
				# loop other all NXintensity_monitor groups inside first (and unique) NXinstrument group
				@( mi_channel = [nxs:$(entry)/<NXinstrument>/<NXintensity_monitor>]
					"Intensity(%s) = %g ;\n" $(mi_channel_name), nxs:$(mi_channel)/intensity[i]
					"Gain(%s) = %g ;\n" $(mi_channel_name), nxs:$(mi_channel)/Gain/data
					"Offset(%s) = %g ;\n" $(mi_channel_name), nxs:$(mi_channel)/offset/data
				@)
				
				"Machine_Current = %? ;\n" nxs:$(entry)/<NXinstrument>/<NXsource>/current
				"Monochromator_energy = %?%s ;\n" nxs:$(entry)/<NXinstrument>/<NXmonochromator>/energy, nxs:$(entry)/<NXinstrument>/<NXmonochromator>/energy.units
				"Distance_sample-detector = %?mm ;\n" nxs:$(entry)/<NXinstrument>/<NXdetector>/distance
				
				# aviex parameters
				"_diffrn_detector.detector = %s ;\n" nxs:$(entry)/<NXinstrument>/<NXdetector>/type
				"Exposure_time  = %?%s ;\n" nxs:$(entry)/<NXinstrument>/<NXdetector>/Exposure/data, nxs:$(entry)/<NXinstrument>/<NXdetector>/Exposure/data.units
				"Shutter_close_delay  = %?%s ;\n" nxs:$(entry)/<NXinstrument>/<NXdetector>/ShutterCloseDelay/data, nxs:$(entry)/<NXinstrument>/<NXdetector>/ShutterCloseDelay/data.units
				"Xbin = %? ;\n" nxs:$(entry)/<NXinstrument>/<NXdetector>/Xbin/data
				"Ybin = %? ;\n" nxs:$(entry)/<NXinstrument>/<NXdetector>/Ybin/data
				
				# motors
				@( motor_data = [nxs:$(entry)/<NXinstrument>/<NXpositioner>]
					"Position(%s) = %g ;\n" $(motor_data_name), nxs:$(motor_data)/raw_value
				@)
			)

			# Define a data bloc with a fixed size given by 'header_length' parameter
			# the default value for 'header_length' (4096) is given in the header of this file
			# the lines begining with '@param' are interpreted by the parsor
			( header $(header_length)              

				"{\n"
				'b' edf_header
				'b' specific_metadata
				# padding pattern (default is a 80 blank spaces string terminating with a CR)
				...
				"\n}\n"
			)

			# Define output as binary file
			b> $(dir)/$(image_full_name).edf

			# Output header bloc as binary data
			'b' header
			# Output data bloc as binary data
			'b' binarydata
			
		?)
		
	@)
	
@)
