<!-- ******************** RETRIEVERS ******************** -->
<chapter id="retrievers">
<title>Retriever Details</title>

<example id="retriever.h"><title>listing of <filename>retriever.h</filename></title>
  <programlisting role="C++">
<![CDATA[class Retriever{
  typedef Ptr<Retriever> RetrieverPtr;

 public:
  /**
   * The factory will call the constructor with a string. The string
   * specifies where to locate the data (e.g. a filename), but
   * interpreting the string is left up to the implementing code.
   */
  //Retriever(const std::string &);

  /**
   * The destructor must be virtual to make sure the right one is
   * called in the end.
   */
  virtual ~Retriever()=0;

  /**
   * This is the method for retrieving data from a file. The whole
   * tree will be written to the new file immediately after being
   * called. Interpreting the string is left up to the implementing
   * code.
   */
  virtual void getData(const std::string &, tree<Node> &)=0;

  /**
   * This method is to be used for debugging purposes only. While the
   * string can be anything, most useful is "[mime_type] source".
   */
  virtual std::string toString() const=0;

  /**
   * Factory method to create new retrievers.
   */
  static RetrieverPtr getInstance(const std::string &, const std::string &);
};]]>
  </programlisting>
</example>

<para><xref linkend="retriever.h"> is the listing of the Retriever
abstract base class. In addition to these methods there are a couple
of assumptions made about classes that implement this interface

<orderedlist><title>Other constraints</title>
 <listitem id="no-copy-or-assign"><para>The copy constructor and
 assignment operator will not be used. It is suggested that they are
 made private methods.</para></listitem>
 <listitem id="mime-type"><para>There is a static const string called
 MIME_TYPE which will be used to determine if that particular
 Retriever should be created by the factory. Care must be made to
 select a unique MIME_TYPE to prevent name clashing.</para></listitem>
 <listitem id="destructor"><para>The destructor will properly
 deallocate all resources allocated in the construtor. Specifically,
 if a file is opened in the constructor, it should be closed in the
 destructor.</para></listitem>
 <listitem id="exception"><para>If anything goes wrong during the
 course of the Retriever's operation, an std::exception will be
 thrown.</para></listitem>
</orderedlist> </para>

<para> The rest of this chapter describes how to create the body of
code, and header, for an example implementation.</para>

<sect1><title>The Simple ASCII Retriever as an Example</title>

<para>The simplest retriever is the the one for the &mime-type
<parameter>text/plain</parameter>. Because of this it makes a good
example of how to create your own retriever. The files are located in
the <filename>text_plain</filename> subdirectory as
<filename>retriever.h</filename> and
<filename>retriever.cpp</filename>.</para>

<example id="text-plain-retriever.h"><title>listing of <filename>text_plain/retriever.h</filename></title>
  <programlisting role="C++">
<![CDATA[#include "../retriever.h"
#include <fstream>

// this is not intended to be inherited from
class TextPlainRetriever: public Retriever{
 public:
  TextPlainRetriever(const std::string &);
  ~TextPlainRetriever();
  void getData(const std::string &, tree<Node> &);
  std::string toString() const;
  static const std::string MIME_TYPE;
 private:
  TextPlainRetriever(const TextPlainRetriever&);
  TextPlainRetriever& operator=(const TextPlainRetriever&);
  std::string source;
  int current_line;
  std::ifstream infile;
};]]>
  </programlisting>
</example>

<para>Note that none of the methods are virtual, so this is not
intended to be derived from directly. That being said, you may want to
copy the header and code for your own retriever as a basis of what
works. In this example the copy constructor and assignment operator
are made private as specified in Other constraints <xref
linkend="no-copy-or-assign">. The private data is a filehandle and the
name of the file that is open for reading. The file name and
&mime-type are used in the <function>toString</function> to identify
it uniquely for debugging as seen in <xref
linkend="text-plain-toString">.</para>

<example id="text-plain-toString"><title>Listing of simple ascii <function>toString</function></title>
  <programlisting role="C++">
<![CDATA[string TextPlainRetriever::toString() const{
  return "["+MIME_TYPE+"] "+source;
}]]>
  </programlisting>
</example>

<para>The first non-trivial function to write is the constructor. The
constructor is not very complicated or insightful. The
<parameter>source</parameter> and accounting for where in the file the
reading is (<parameter>current_line</parameter>) are initialized in
line 1. Line 3 opens the file, and line 6 confirms that it was opened
without error. An exception is thrown if there is a problem to follows
Other constraints <xref linkend="exception">. The constructor is very
brief because C++ <parameter>fstream</parameter> library provides the
<parameter>ifstream</parameter> object that does most of the
work.</para>

<example id="simple-ascii-constructor"><title>Listing of the simple ascii constructor</title>
  <programlisting role="C++" linenumbering="numbered">
<![CDATA[TextPlainRetriever::TextPlainRetriever(const string &str): source(str),current_line(0){
  // open the file
  infile.open(source.c_str());

  // check that open was successful
  if(!infile.is_open())
    throw invalid_argument("Could not open file: "+source);
}]]>
  </programlisting>
</example>

<para>The destructor for the Retriever in <xref
linkend="simple-ascii-destructor"> is just as simple simpler since all
it has to do is close the file. There were no calls in the constructor
(or anywhere else) to <function>new</function> or
<function>malloc</function> so the constructor does not need to call
<function>delete</function> or <function>free</function>.</para>

<example id="simple-ascii-destructor"><title>Listing of the simple ascii destructor</title>
  <programlisting role="C++">
<![CDATA[TextPlainRetriever::~TextPlainRetriever(){
  // close the file
  if(infile)
    infile.close();
}]]>
  </programlisting>
</example>

<para>Next is the <function>getData</function> function which is
simple as well. All that <function>getData</function> does is grab a
line of text from the file and create a node. Lines 3-4 are error
checking, and line 7 converts the <parameter>location</parameter>
string into an integer. Line 10 moves to the appropriate place in the
file while line 12 gets the string on that line. Since every
<function>getData</function> must put a <parameter>node</parameter>
into the provided <parameter>tree</parameter>, line 15 creates a
<parameter>node</parameter> to be filled with data. Lines 18-20 update
the generic <parameter>node</parameter> with the string read in from
the source file. Finally line 21 adds the single node to the supplied
tree.</para>

<example id="simple-ascii-getData"><title>Listing of the simple ascii <function>getData</function></title>
  <programlisting role="C++" linenumbering="numbered">
<![CDATA[void TextPlainRetriever::getData(const string &location, tree<Node> &tr){
  // check that the argument is not an empty string
  if(location.size()<=0)
    throw invalid_argument("cannot parse empty string");

  // check that the argument is an integer
  int line_num=string_util::str_to_int(location);

  // set stream to the line before
  skip_to_line(infile,current_line,line_num);
  // read the line and print it to the console
  string text=read_line(infile);

  // create an empty node
  Node node("empty","empty");

  // put the data in the node
  vector<int> dims;
  dims.push_back(text.size());
  update_node_from_string(node,text,dims,Node::CHAR);
  tr.insert(tr.begin(),node);
}]]>
  </programlisting>
</example>

<para><xref linkend="simple-ascii-getData"> is brief because it
leverages existing functionality. The <parameter>ifstream</parameter>
objects does all of the work of getting information out of a
file. <function>skip_to_line</function> and
<function>read_line</function> are very short functions that scan to a
point in an ascii file and read from a point to the next end-of-line
character, respectively. Finally, the function
<function>update_node_from_string</function> existed in &nxtranslate
already to assist <parameter>node</parameter> creation while reading
the translation file. The interested reader can look at the source of
<filename>node_util.cpp</filename> and
<filename>text_plain/retriever.cpp</filename> to see the body of the
functions.

</para>

</sect1>

</chapter>
