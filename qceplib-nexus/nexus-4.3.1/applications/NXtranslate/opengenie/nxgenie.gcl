#
# $Id: nxgenie.gcl 770 2006-05-16 15:17:15Z faa59 $
#
# Additional procedures needed by NXtranslate GENIE
#
# Freddie Akeroyd <F.A.Akeroyd@rl.ac.uk>
#
PRINTIN "Loading additional OpenGENIE  procedures"
TOGGLE/INFO/OFF
TOGGLE/DEBUG/OFF

PROCEDURE MKISO
PARAMETERS name=String
RESULT RES
LOCAL day month year s
day=SUBSTRING(name,1,2)
IF substring(day,1,1) = " "; day = "0" + substring(day,2,1); ENDIF
month=substring(name,4,3)
year=substring(name,8,4)
IF month = "JAN"; s = "01"; ENDIF
IF month = "FEB"; s = "02"; ENDIF
IF month = "MAR"; s = "03"; ENDIF
IF month = "APR"; s = "04"; ENDIF
IF month = "MAY"; s = "05"; ENDIF
IF month = "JUN"; s = "06"; ENDIF
IF month = "JUL"; s = "07"; ENDIF
IF month = "AUG"; s = "08"; ENDIF
IF month = "SEP"; s = "09"; ENDIF
IF month = "OCT"; s = "10"; ENDIF
IF month = "NOV"; s = "11"; ENDIF
IF month = "DEC"; s = "12"; ENDIF
res <~ year + "-" + s + "-" + day
ENDPROCEDURE

PROCEDURE GETDAT
QUALIFIERS /GANG # want values by spectrum
PARAMETERS name=String num=Integer
RESULT RES
GLOBAL CNT1 SPEC UDET NSP NDET MDET NTC NMON sorted_spec LEN2 tcb tcb_widths
LOCAL TMP dstidx i j dummy_int_array hdr
IF NOT DEFINED(CNT1)
    SPEC <~ GET("SPEC")
    sorted_spec = spec
    sort rank(spec) sorted_spec
    UDET <~ GET("UDET")
    nsp <~ GET("NSP1")
    ntc <~ GET("NTC1")
    tmp <~ GET("CNT1")
    cnt1 <~ tmp[2:(nsp+1),2:(ntc+1)] # remove spectrum 0 and time channel 0
    mdet <~ GET("MDET")
    ndet <~ GET("NDET")
    len2 <~ GET("LEN2")
    nmon <~ GET("NMON")
    tcb <~ GET("TIM1")
    tcb_widths <~ tcb[2:(ntc+1)] - tcb[1:(ntc)]
ENDIF
IF name = "CNT1"
    res <~ cnt1
    RETURN
ENDIF
IF name = "START"
    hdr <~ GET("HDR")
    res <~ MKISO(substring(hdr,53,11)) + "T" + substring(hdr,65,8) + "Z"
    RETURN
ENDIF
IF name = "END"
    res <~ MKISO((GET("CRPB"))[17]) + "T" + (GET("CRPB"))[20] + "Z"
    RETURN
ENDIF
dstidx <~ dimensions(nsp)
fill dstidx 1 1
IF name = "MON_DET"
    IF (num > nmon); res = 0; RETURN; ENDIF
    i <~ MDET[num]
    IF (i < 1) OR (i > NDET); res = 0; RETURN; ENDIF
    IF GANG
        res <~ SPEC[i]
    ELSE
        res <~ UDET[i]
    ENDIF
    RETURN
ENDIF
IF name = "MON_DIST"
    IF (num > nmon); res = 0.0; RETURN; ENDIF
    i <~ MDET[num]
    IF (i < 1) OR (i > NDET); res = 0.0; RETURN; ENDIF
    res <~ len2[i]
    RETURN
ENDIF
IF name = "MON"
    dummy_int_array <~ dimensions(ntc)
    fill dummy_int_array 0
    IF (num > nmon); res <~ dummy_int_array; RETURN; ENDIF
    i <~ MDET[num]
    IF (i < 1) OR (i > NDET); res <~ dummy_int_array; RETURN; ENDIF
    j <~ SPEC[i]
    IF (j < 1) OR (j > NSP); res <~ dummy_int_array; RETURN; ENDIF
    RES <~ redim(CNT1[j,1:(ntc)],ntc)
    RETURN
ENDIF
IF GANG AND (name = "UDET")
    RES <~ DSTIDX
    RETURN
ENDIF
IF (name = "GROUP_INDEX")
    dstidx <~ dimensions(ndet)
    fill dstidx 1
    RES <~ DSTIDX
    RETURN
ENDIF
IF (name = "GANG_COUNT") OR (name = "GANG_INDEX")
    TMP <~ UNIQUE_ELEMENTS:IGNMISS(sorted_spec, dstidx)
    IF name = "GANG_COUNT"
        res <~ tmp.counts
    ENDIF
    IF name = "GANG_INDEX"
        res <~ tmp.offsets
    ENDIF
    RETURN
ENDIF
TMP <~ GET(NAME)
IF GANG
    RES <~ INDEXEDCOPY:ZEROMISSING:AVERAGE:IGNSRCDUP(dstidx,spec,tmp)
ELSE
    SORT RANK(SPEC) TMP 
    RES <~ TMP
ENDIF
ENDPROCEDURE

