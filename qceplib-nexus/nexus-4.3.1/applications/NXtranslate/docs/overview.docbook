<!-- ******************** OVERVIEW ******************** -->
<chapter id="overview"><title>Overview</title>

<para>&nxtranslate is designed to be the anything to NeXus
converter. To this end it is built in a modular fashion so the types
of files that can be read from can vary between different
installations. The reason for this is to minimize the size of the
executable. In line with this modularity is the author's desire to
work with users of &nxtranslate to add abilities, clarify
documentation, and fix bugs.</para>

<para>&nxtranslate operates by parsing a <link
linkend="translation-file">translation file</link> to create a NeXus
file. The translation file contains the organization of the resulting
NeXus file, data, and instructions on other how to obtain data using
<link linkend="retrievers">retrievers</link>. This book is organized
into chapters with an increasingly sophisticated user in mind. The
chapter you are reading is a general overview on how to use
&nxtranslate with an existing installation and existing translation
files. <link linkend="translation-file">Chapter 2</link> is aimed at
writing translation files and <link linkend="retrievers">chapter
3</link> will discuss in more detail what retrievers are and how to
write them.</para>

<sect1><title>Command line arguments</title>

<para>This section will explain the various command line arguments to
&nxtranslate . For all of the examples here the name of the
translation file is <filename>test.xml</filename>.</para>

<cmdsynopsis>
  <command>nxtranslate</command>
  <arg>--help</arg>
  <arg>-o <replaceable>outputfile</replaceable></arg>
  <group>
    <arg>--hdf4</arg>
    <arg>--hdf5</arg>
  </group>
  <arg>-D <replaceable>macro</replaceable></arg>
  <arg choice="req"><replaceable>translationfile</replaceable></arg>
  <arg>--append <replaceable>outputfile</replaceable></arg>
</cmdsynopsis>

<para>First to get the easy arguments out of the way. Typing just
<command>nxtranslate</command> will give a usage statement similar to
what is above. <command>nxtranslate</command>
<parameter>--help</parameter> will print the full help
message. Generally speaking this is not what you are interested
in.</para>

<para>The minimum argument list for &nxtranslate to do anything other
than print the usage message is to supply a translation file. The
cannonical example is

<informalexample><programlisting>
<prompt>bash$</prompt> <command>nxtranslate</command> <filename>test.xml</filename>
</programlisting></informalexample>

This tells &nxtranslate to parse the file
<filename>test.xml</filename> and produce a NeXus file called
<filename>test.nxs</filename> using the default base format (base
format is discussed below). To change the name of the output file use
the "<parameter>-o</parameter>" switch.

<informalexample><programlisting>
<prompt>bash$</prompt> <command>nxtranslate</command> <filename>test.xml</filename> <parameter>-o</parameter> <filename>my_file.nxs</filename>
</programlisting></informalexample>

The only difference with the previous example is that the resulting
NeXus file is <filename>my_file.nxs</filename>.
</para>

<para>The switches "<parameter>--hdf4</parameter>" and
"<parameter>--hdf5</parameter>" are mutually exclusive and take no
arguments. These are used to select the base format for the output
file. NeXus is actually written using the Hierarchical Data Format
(HDF) which is produced by the National Center for Supercomputer
Applications (NCSA). There are two (incompatible) versions of HDF that
have widespread use that are commonly referred to as HDF4 and
HDF5. Part of the purpose of the NeXus API is to hide the difference
between the different bases. In this spirit &nxtranslate only exposes
the bases with these switches. To create two files with the same
structure and diffent bases is easy.

<informalexample><programlisting>
<prompt>bash$</prompt> <command>nxtranslate</command> <parameter>--hdf4</parameter> <filename>test.xml</filename> <parameter>-o</parameter> <filename>my_hdf4.nxs</filename>
<prompt>bash$</prompt> <command>nxtranslate</command> <parameter>--hdf5</parameter> <filename>test.xml</filename> <parameter>-o</parameter> <filename>my_hdf5.nxs</filename>
</programlisting></informalexample>

</para>

<para>The last command line argument is the
"<parameter>-D</parameter>" switch. This switch allows for
substituting strings in the the translation file for the &mime-type ,
&source , and &location attributes in the translation file. To get a
better understanding of what this means see Chapter 2. For now it is enough to show an example. 

<informalexample><programlisting>
<prompt>bash$</prompt> <command>nxtranslate</command> <filename>test.xml</filename> <parameter>-D</parameter>FILE1=<filename>old_nexus.nxs</filename>
</programlisting></informalexample>

This example assumes that there is a macro
<parameter>FILE1</parameter> in the translation file. &nxtranslate will
convert the string <parameter>FILE1</parameter> into
<filename>old_nexus.nxs</filename> before creating the resulting NeXus
file. This allows for a script to convert an entire directory of files
to look like (using python)

<informalexample><programlisting>
listing=glob.glob("*.nxs")
for file in listing:
    os.system("<command>nxtranslate</command> <filename>converter.xml</filename> -DFILE1=%s -o new_%s" % (file,file))
</programlisting></informalexample>

This bit of code (plus the proper import statements) would use the
translation file <filename>converter.xml</filename> to translate all
<filename>*.nxs</filename> in the current working directory.

</para>

</sect1>

</chapter>
