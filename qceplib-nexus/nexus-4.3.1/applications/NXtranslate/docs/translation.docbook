<!-- ******************** TRANSLATION-FILE ******************** -->
<chapter id="translation-file">
<title>The Translation File</title>

<para>The file produced by &nxtranslate is entirely determined by the
contents of the translation file. This chapter discusses the format of
a translation file as well as listing "location strings" for the
external formats.</para>

<sect1><title>Overview</title>

<para>Translation files are written in xml and read using an xml
parser. For this reason they must be a valid xml
file. <footnote><para>There are many places to find more information
about XML <ulink
url="http://www.w3.org/XML/"><citetitle>W3C</citetitle></ulink> is the
definitive standard while <ulink
url="http://studio.tellme.com/general/xmlprimer.html"><citetitle>Tellme
Studio</citetitle></ulink> has a one page overview of what XML
is.</para></footnote> This means that the following rules must be
adhered to

<itemizedlist>
<listitem><para>Every opening tag must have a corresponding closing
tag at the same level. This means that
<function><![CDATA[<entry><data></data></entry>]]></function> is
allowed while
<function><![CDATA[<entry><data></entry></data>]]></function> and
<function><![CDATA[<entry><data></data>]]></function> are
not.</para></listitem>
<listitem><para>Tags and attribute names are case sensitive. Therefore
<parameter><![CDATA[<entry>]]></parameter> and
<parameter><![CDATA[<Entry>]]></parameter> are distinct tags. While this
can lead to confusion when writing a translation file it is easily
avoided in practice.</para></listitem>
<listitem><para>Attribute values must be inside single (') or double (")
quotes.</para></listitem>
<listitem><para>Tags and attribute names cannot start with a number or
special character. Another way of saying this is that the name must start 
with a letter.</para></listitem>
<listitem><para>Certain characters will break the parsing of the
xml. The characters, and how to create them are &lt
(<function><![CDATA[&lt]]></function>), &gt
(<function><![CDATA[&gt]]></function>), &amp
(<function><![CDATA[&amp]]></function>), &quot
(<function><![CDATA[&quot]]></function>), and &apos
(<function><![CDATA[&apos]]></function>).</para></listitem>
<listitem><para>Empty tags,
<function><![CDATA[<data></data>]]></function>, can be replaced with a
single tag, <function><![CDATA[<data/>]]></function>. This convenience
will make more sense during the discussion of translation files when
specifying information outside of the file.</para></listitem>
</itemizedlist>
</para>

<para>There are some other rules to note about the translation
file. It is not simply a XML file, there are additional
constraints. However, the translation file is not directly validated
to follow these constraints, but failing to follow them will result in
the program exiting early without creating a NeXus file. Also,
NXtranslate is intended to be used to write any file readable by the
NeXus API, so the translation file is not validated against definition
files. <footnote><para>This decision was made on the basis of
performance since it was determined that most of the time a "standard"
translation file will be used to convert a large number of
files.</para></footnote> First some definitions used througout this
document.

<variablelist><title>Translation file definitions</title>

<varlistentry><term>&napi</term><listitem><para>An abbreviation for the NeXus Abstract Program Interface.</para></listitem></varlistentry>

<varlistentry><term>node</term><listitem><para>A point in the
hierarchy, it can either contain other nodes (be a parent with
children) or not (a leaf node). Any pair of opening an closing tags
represents a single node.</para></listitem></varlistentry>

<varlistentry><term>group</term><listitem><para>A node that contains
other nodes.</para></listitem></varlistentry>

<varlistentry><term>field</term><listitem><para>A node that does not
contain other nodes (a leaf node). In other places in NeXus this is
sometimes refered to as a "data" or a
"SDS".</para></listitem></varlistentry>

<varlistentry><term><parameter>retriever</parameter></term><listitem><para>An
object whose job is to retrieve information from a source external to
the translation file. Which retriever is created is determined by the
value of &mime-type . The retriever is initialized using the value of
&source . Information is produced by the retriever using the &location
.</para></listitem></varlistentry>

<varlistentry><term>special attribute</term><listitem><para>An
attribute that is interpreted by &nxtranslate as a command to deal
with external information. The special attributes are &mime-type , &source ,
&location , and &make-link .</para></listitem></varlistentry>

<varlistentry><term>&mime-type</term><listitem><para>A keyword that
denotes what library to use to retrieve information from an external
source. It can be a valid mime type.</para></listitem></varlistentry>

<varlistentry><term>&source</term><listitem><para>A string denoting
what a retriever should use to initialize itself. This is generally a
file on the local system for the retriever to
open. </para></listitem></varlistentry>

<varlistentry><term>&location</term><listitem><para>A string passed to
the retriever for it to generate data from. For example, when using
the NeXus retriever this is a path to a particular node in the file
which will be written out to the resulting NeXus
file.</para></listitem></varlistentry>

<varlistentry><term>&link-tag</term><listitem><para>This denotes a
node that is a link to another node in the file. It must have a
&make-link attribute. All other attributes will be
ignored</para></listitem></varlistentry>

<varlistentry><term>&make-link</term><listitem><para>The attribute
denoting what a &link-tag node should be linked to. The syntax for
describing location is the same as for the <link linkend="nexus">NeXus
retriever</link>. If this attribute appears in a node other than
&link-tag it will be treated as a normal
attribute.</para></listitem></varlistentry>

<varlistentry><term>primative type</term><listitem><para>Any of the
following types (ignoring bit-length): <parameter>NX_UINT</parameter>
(unsigned integer), <parameter>NX_INT</parameter> (signed integer),
<parameter>NX_FLOAT</parameter> (floating point number),
<parameter>NX_CHAR</parameter> (character),
<parameter>NX_BOOLEAN</parameter> (boolean, or true/false),
<parameter>NX_BINARY</parameter> (binary value). At the moment
<parameter>NX_BOOLEAN</parameter> and <parameter>NX_BINARY</parameter>
are not supported by &nxtranslate and the NeXus API supports only one
dimension arrays of <parameter>NX_CHAR</parameter>.
</para></listitem></varlistentry>

</variablelist>
</para>

<para>Now that the definitions have been presented the other constraints of a translation file can be explained.
<itemizedlist>

<listitem><para>The root node in a file will be
<parameter><![CDATA[<NXroot>]]></parameter>. There will be nothing
before or after it, and only one of them. The NXroot can be used to
set global values for &mime-type and &source .</para></listitem>

<listitem><para>Only groups can exist directly inside the
root. This is a constraint of the NeXus API.</para></listitem>

<listitem><para>Every node (except the <parameter>NXroot</parameter>
and &link-tag ) needs a <parameter>name</parameter> and
<parameter>type</parameter>. If the node has a &location then the type
can be omitted since the retriever will provide it.</para></listitem>

<listitem><para>Groups cannot have any attribute other than the
special ones. Fields can have any attribute. This reflects a
restriction in the NeXus API and does not constrain the contents of
resulting NeXus files in any way.</para></listitem>

<listitem><para>Groups cannot have any data in them. In other words
things similar to <parameter><![CDATA[<data type="NXdata">1 2 3
4</data>]]></parameter> are incorrect.</para></listitem>

<listitem><para>To specify the dimensions of a field, use square
brackets [] affter the type. A single precision floating point array
with five elements would have
<parameter>type="NX_FLOAT32[5]"</parameter>. If the field has only one
element, or is a character array, the dimensions can be left off. For
character arrays, the dimensions are ignored.</para></listitem>

<listitem><para>To specify the type of a attribute denote the
primative type separated from the value using square brackets. For
numeric types only scalars are allowed. If no type is specified it is
assumed to be a character array (length is determined
automatically).</para></listitem>

</itemizedlist>
</para>


</sect1>

<sect1 id="simple-translation"><title>Simple Translation</title>

<para>While &nxtranslate is the anything to NeXus translator, it is
possible to have everything specfied in the translation file. <xref
linkend="simple-translation-xml"> shows a translation file where no
information will be taken from any other file.</para>

<example id="simple-translation-xml"><title>Simple translation file <filename>test_simple.xml</filename></title>
<programlisting role="XML" linenumbering="numbered">
<![CDATA[<NXroot>
  <NXentry name="entry1">
    <NXnote name="note">
      <author type="NX_CHAR">George User</author>
      <type type="NX_CHAR">text/plain</type>
      <data type="NX_CHAR">The data is a simple parabola, f(x)=x^2
      </data>
    </NXnote>
    <NXdata name="parabola_1D">
      <x type="NX_INT8[11]" axis="NX_INT:1" units="number">
            0 1 2 3  4  5  6  7  8  9  10
      </x>
      <f_x type="NX_INT16[11]" signal="NX_INT:1" units="number">
            0 1 4 9 16 25 36 49 64 81 100
      </f_x>
    </NXdata>
  </NXentry>
  <NXentry name="entry2">
    <NXnote name="note">
      <author type="NX_CHAR">George User</author>
      <type type="NX_CHAR">text/plain</type>
      <data type="NX_CHAR">The data is a two dimensional parabola,
                           f(x,y)=x^2+y^2</data>
    </NXnote>
    <NXdata name="parabola_2D">
      <x type="NX_FLOAT32[4]" axis="NX_INT:1" units="number">
           1.0 4.7 2.3 1.6
      </x>
      <y type="NX_FLOAT32[3]" axis="NX_INT:2" units="number">
           3.3 6.2 9.2
      </y>
      <f_x_y type="NX_FLOAT64[4,3]" signal="NX_INT:1" axes="x,y" units="number">
            11.89 32.98 16.18
            13.45 39.44 60.53
            43.73 41.00 85.64
           106.73 89.93 87.20
      </f_x_y>
    </NXdata>
  </NXentry>
</NXroot>]]>
</programlisting>
</example>

<para>This example follows all of the rules laid out in the previous
section and serves to introduce several of the features of the
translation file. First a style note though, in XML files there is a
concept of "ignorable whitespace". These are carriage returns
(<![CDATA[\n]]>), line feeds (<![CDATA[\r]]>), tabs (<![CDATA[\t]]>),
and spaces. These are ignored (as suggested by the term "ignorable
whitespace") and are present to aid those looking at the raw XML to
see the node hierarchy.</para>

<para>The main purpose of <xref linkend="simple-translation-xml"> is
to show how to specify information in a translation file. Line 4
demonstrates the method for strings. Here the
<parameter>name</parameter> is <parameter>author</parameter> and the
<parameter>type</parameter> is <parameter>NX_CHAR</parameter>. The
length of the character array is determined from the actual string
supplied rather than what is specified in the
<parameter>type</parameter> attribute. The value is created by reading
in the supplied string, converting tabs, carriage returns, and line
feeds into a single space, turning any sections of multiple whitespace
into a single space, then chopping off any whitespace at both ends of
the string. This allows the person writting the file to add whitespace
in strings as needed to make the raw XML easier to read, without
changing what is written into the final NeXus file.</para>

<para>Next to look at is how arrays of numbers are specified. Lines
24-27 show both one and two dimensional arrays. The dimension of the
array is specified with the type as discussed above.  <quote>The thing to
notice here is that arrays of numbers are specified as comma delimited
lists. The brackets in the list of values are "syntatic sugar". When
the values are read in &nxtranslate converts them into commas then
converts multiple adjacent commas into a single comma. The purpose of
this is so translation file authors can more easily see each dimension
of the array that they wrote. The brackets can also be removed
altogether as seen in line 24.</quote></para>

</sect1>

<sect1 id="nexus-translation"><title>Translation from NeXus</title>

<para>Next is to show how to use NXtranslate to bring in information
from external sources. <xref linkend="nexus-translation-xml">
demonstrates various features of importing information from external
sources, including modifying it before writing.</para>

<example id="nexus-translation-xml"><title>Translation from NeXus file <filename>test_nexus.xml</filename></title>
<programlisting role="XML" linenumbering="numbered">
<![CDATA[<NXroot NXS:source="test_simple.nxs" NXS:mime_type="application/x-NeXus">
  <entry_1D NXS:location="/entry1"/>
  <entry_2D type="NXentry">
    <note NXS:location="/entry1/note">
       <description type="NX_CHAR">The functional form of the data
             </description>
    </note>
    <parabola_2D type="NXdata">
      <x axis="2" NXS:location="/entry2/parabola_2D/x"/>
      <y axis="1" NXS:location="/entry2/parabola_2D/y"/>
      <f_x_y type="NX_FLOAT64[3,4]" axes=""
            NXS:location="/entry2/parabola_2D/f_x_y"/>
    </parabola_2D>
  </entry_2D>
</NXroot>]]>
</programlisting>
</example>

<para>As suggested earlier the root node (line 1) has defined a
&source and &mime-type to use for creating a retriever. Line 2
demonstrates that entire entries can be copied from one file to the
next and that the name of a node can be changed. In this case it is
from <parameter>entry1</parameter> to
<parameter>entry_1D</parameter>. Lines 4-7 show how to copy over an
entire group and add a new field to it. For finer control of what is
added and have the ability to change attributes look at lines
9-12. Line 11 shows how to change the dimensions of the field by using
the <parameter>type</parameter> attribute. Please note that this will
not work for character arrays and the total number of array items must
remain constant. Also, the type itself cannot be changed (single
precision float to double precision float, etc.). Since the dimensions
of the <parameter>f_x_y</parameter> array change it makes sense to
change the axes for plotting. This is done in both line 9 and 10 by
specifying the attribute and its new value. To add another attribute
just specify it similarly. Line 11 demonstrates erasing the
<parameter>axes</parameter> attribute. Specify the attribute with an
empty string as the value.</para>

<para>These two examples have shown the way to set up a translation
file. You can import information from multiple files by declaring
another &source and &mime-type . There are a couple of things to know
about these as well. The default &mime-type is
"<parameter>application/x-NeXus</parameter>" so it does not need to be
specified. For each &source , whatever &mime-type was defined in the
parent node will be used for the current &source . <xref
linkend="convoluted-translation-xml"> shows what, in principle, could
be done with &nxtranslate as more retrievers get
written.<footnote><para>While retrievers that import information from
mySQL and jpeg images would be nice, they do not currently
exist.</para></footnote> </para>

<example id="convoluted-translation-xml"><title>A contrived example</title>
<programlisting role="XML" linenumbering="numbered">
<![CDATA[<NXroot>
  <entry1  NXS:source="test_simple.nxs" NXS:location="/entry1">
    <user type="NXuser" NXS:source="127.0.0.1" NXS:mime_type="mySQL">
      <name type="NX_CHAR">George User</name>
      <address NXS:location="query(George User):address"/>
      <email NXS:location="query(George User):email"/>
      <phone NXS:location="query(George User):phone"/>
      <picture NXS:source="GeorgeUser.jpg" NXS:mime_type="img/jpeg" NXS:location="all"/>
    </user>
  </entry1>
  <entry2 NXS:source="test_nexus.nxs" NXS:location="/entry_2D"/>
</NXroot>]]>
</programlisting>
</example>

<sect2 id="links"><title>Anatomy of Links</title>

<para>The two nodes involved in a link are the source and link. The
source is the original version of the information, the link is the
copy. There is no way to decipher which is the original and which is
the copy without direct comparison of ids using the NeXus api. Links
can be either to a group or field. Links to attributes are not
supported by the &napi . A link to a group and field are both shown in
<xref linkend="two-links-xml">. The first link is to a group whose
name was <parameter>group1</parameter>, while the second link is to a
field <parameter>array1</parameter>.</para>

<example id="two-links-xml"><title>Two links</title>
<programlisting role="XML">
<![CDATA[<NAPIlink target="/entry/group1"/>
<NAPIlink target="/entry/group1/array1"/>]]>
</programlisting>
</example>

</sect2>
</sect1>

<sect1 id="translation-strings"><title>Strings for Translation</title>

<para>The previous section discussed how to write a translation file
and several of its features. This section will explain in more detail
the strings available for use in a translation file. In principle this
section is incomplete because there may exist retrievers that the
authors have not been informed of so consider this list
incomplete. Also, by nature, the retrievers are quite decouple so the
location strings for each retriever can be significantly different
from the others.</para>

<sect2 id="nexus"><title>NeXus</title>

<para>As seen earlier in this chapter the &mime-type for NeXus files
is <parameter>application/x-NeXus</parameter>. Similarly the &location
strings are as simple as possible. NeXus files are organized
hierarchically similar to the translation file. A good analogy is to
compare it to a file system where the groups are directories and the
fields are files. Using this analogy the &location strings are
absolute paths to the directory or file to be copied. Since there
examples of NeXus location strings in <xref
linkend="nexus-translation-xml"> and <xref
linkend="convoluted-translation-xml"> there is only one other thing to
mention, the path separator is a forward slash, "/".

</para>

</sect2>

<sect2 id="text-plain"><title>Simple ASCII</title>

<para>The &mime-type for the simple ASCII retriever is
<parameter>text/plain</parameter>. The functionality of the simple
ASCII retriever is limited. This is to emphasize the methodology for
building retrievers, rather than build a general purpose one. All of
the location strings are integers defining the line number to use. The
first line of the file is zero.</para>

</sect2>

<sect2 id="SNS-histogram"><title>SNS Histogram</title>

<para>The &mime-type for the SNS histogram retriever is
<parameter>application/x-SNS-histogram</parameter>.</para>

<para>The &location is of the general form

<informalexample><programlisting>[...,dim2,dim1][...,dimY,dimX]#{tag_name_1|operator_1}keyword_1{tag_name_2|
operator2}keyword_2...</programlisting></informalexample>

Notice that the &location is divided into two parts, declaration and
definition, separated by <parameter>#</parameter>. The declaration
describes the dimension of the retrieved data. The definition
describes which information the data consists of. Both of these will
be described in greated detail below.</para>

<para>The declaration part, <parameter>[...,dim2,dim1][...,dimY,dimX]</parameter> 
surrounded by square brackets, contains between the first brackets the size of each dimension of the array to be returned, separated by commas, and between the second set of brackets, the dimensions of the array to read from. The values are
specified as positive integers. The current version of the retriever returns an array of the same size as the initial array, no matter the dimensions given between the first set of brackets.
</para>

<para>The definition part,
<parameter>{tag_name_1|operator_1}keyword_1{tag_name_2|operator2}...</parameter>,
is where selecting the data to be transfered from the SNS histogram
file is described. Each part of the definition consists of a
<parameter>tag_name</parameter> and
<parameter>operator</parameter> separated by a vertical slash <parameter>"|"
</parameter>. Multiple definitions can exist in a
single &location separated by <parameter>keyword</parameter>s. If the
definition is missing, then all of the available data will be
retrieved.</para>

<para>The possible values for the <parameter>tag_name</parameter> are

<variablelist>

<varlistentry><term><parameter>pixelID</parameter></term>
<listitem><para>Select using unique pixel identifiers. Applicable for all
detectors.</para></listitem>
</varlistentry>

<varlistentry><term><parameter>pixelX</parameter></term>
<listitem><para>Select using column numbers. Applicable for all area
detectors</para></listitem>
</varlistentry>

<varlistentry><term><parameter>pixelY</parameter></term>
<listitem><para>Select using row numbers. Applicable for all area
detectors</para></listitem>
</varlistentry>

<varlistentry><term><parameter>Tbin</parameter></term>
<listitem><para>Select using time channels. Applicable for all
detectors</para></listitem>
</varlistentry>

</variablelist>

</para>

<para>The <parameter>operator</parameter> can be of one of two forms

<itemizedlist>

<listitem><para><function>loop(start,end,increment)</function> is used
to specify a series of identifiers that runs inclusively from
<parameter>start</parameter> to <parameter>end</parameter> in steps of
<parameter>increment</parameter>.</para></listitem>

<listitem><para>List of identifiers. The identifiers specify which
data to include. The identifiers must be separated by commas.</para></listitem>

</itemizedlist>

</para>

<para>The <parameter>keyword</parameter> is used to link various
declarations together into unions and intersections. Keywords are
entirely optional. Keywords that work on two definitions are left
associative.

<variablelist>

<varlistentry><term><parameter>!</parameter></term>
<listitem><para>The logical "not" operator. This negates the definition
following it. Must be placed just in front of the curly braces it is
associated with.</para></listitem></varlistentry>

<varlistentry><term><parameter>()</parameter></term>
<listitem><para>Grouping operation. This can be used to clarify what
order multiple keywords are applied. No associative parentheses are allowed within
the curly braces.</para></listitem></varlistentry>

<varlistentry><term><parameter>AND</parameter></term>
<listitem><para>The logical "and" operator. This generates the
intersection of two definitions. This parameter is case sensitive.</para></listitem></varlistentry>

<varlistentry><term><parameter>OR</parameter></term>
<listitem><para>The logical "or" operator. This generates the union of
two definitions. This parameter is case sensitive.</para></listitem></varlistentry>
</variablelist>
</para>

<variablelist><title>Examples</title>

<varlistentry><term><parameter>[150,256,167][304,256,167]#{pixelID|loop(1,38400,1)}</parameter></term>
<listitem>

<para>This retrieves the first 38400 pixel identifiers and
put the data into a 150x256x167 array where the 167 dimension 
changes the fastest. In this example, there are 167 time channels,
256 columns, and 150 rows. The data are coming from a binary file where the data
are stored as a 304x256x167 flat array </para></listitem></varlistentry>

<varlistentry><term><parameter>[50,256,100][304,256,167]#{pixelID|loop(1,12800,1)}AND{Tbin|loop(1,100,1)}</parameter></term>
<listitem>

<para>This retrieves the union of the first 12800 pixel
identifiers with the first 100 time channels then places the data into
a 50x256x100 array. One must keep in mind that if the array declared
is of a different size than the data defined, an error will be
generated.</para></listitem></varlistentry>

<varlistentry><term><parameter>[7,167][304,256,167]#{pixelX|45,53,60,61,62,34500,34501}</parameter></term>
<listitem><para>This retrieves a series of
columns.</para></listitem></varlistentry>

</variablelist>


</sect2>

<sect2 id="text-xml"><title>XML retriever</title>

<para>The &mime-type for the XML retriever is
<parameter>text/xml</parameter>. The XML retriever is built on top of
libxml2's document object model (DOM) parser. Because of this the
entire file for information to be retrived from is loaded into memory
as a character arrays. The DOM API was chosen to allow for jumping
around the source file without needed to parse its contents multiple
times. The location string will be formatted according to the
following rules:

<itemizedlist>

<listitem><para>The location string for a field will look like a
(unix) path. Each level of the hierarchy is separated by a forward
slash, "/".</para></listitem>

<listitem><para>To specify the type the value is preceeded using a
name separated using a colon, ":". The allowed names are
"INT8,INT16,INT32,UINT8,UINT16,UINT32,FLOAT32,FLOAT64". If no name is
specified it is (implicitly) a string. Therefore to get "the_answer"
as a double precision float the location is
"FLOAT64:/numbers/the_answer".</para></listitem>

<listitem><para>In the case where the field has a "type" attribute
with the value being one of the types above that will be used rather
than as a character array. Specifying the type in the location will
override what is in the source file.</para></listitem>

<listitem><para>Arrays can be specified as part of the type as either
an attribute in the XML file or in the location string. To get a six
element integer array use the location "/numbers/array" which points to a whitespace delimited list. Multiple dimensions are specified by using a comma
delimited list in the square brackets
(i.e. "INT16[3,2]:/numbers/array")</para></listitem>

<listitem><para>To get an attribute specify it at the end of a path
separated by a hash symbol, "#". Therefore to get attr2 as a single
precision float the location is
"FLOAT32:/numbers#attr2".</para></listitem>

</itemizedlist>

This methodolgy does not allow for automatically detecting the type of
an imported attribute (it will be read as a string), or
differentiating two fields at the same level with the same tag
name.</para>

<!--
<example><title>announcement email</title>
<programlisting role="XML">
<![CDATA[Everybody,

Rob and I talked some more about this via phone and made some
decisions. Please object as necessary so the correct thing is
implemented. Since it was deciding what "special features" the xml
file could have I will just relist the entire feature set of the
retriever (now with numbers).

First a new example file:

<numbers attr1="hi">
  <the_answer attr3="hello" type="INT16">42</the_answer>
  <the_better_answer attr3="hello">43</the_better_answer>
  <gravity>9.81</gravity>
  <gravity>32</gravity>
  <array type="INT16[5]">0,1,2,3,4</array>
</numbers>
<best_units attr2="3.14">
  furlongs/fortnight
</best_units>

The (revised methodology)

  (1) XML files will be read using the Document Object Model (DOM)
  parser provided by libxml2 (libxml2's SAX parser is used by
  NXtranslate for the translation file). The DOM parser is preferred
  since the user will (in principle) jump around the file at random to
  get different bits of information.

  (2) The location string for a field will look like a (unix) path. To
  get the string "43" with the string attribute "hello" the location
  is "/numbers/the_better_answer".

  (3) To specify the type the value is preceeded using a name
  separated using a colon, ":". The allowed names are
  "INT8,INT16,INT32,UINT8,UINT16,UINT32,FLOAT32,FLOAT64". If no name
  is specified it is (implicitly) a character array. Therefore to get
  "the_answer" as a double precision float the location is
  "FLOAT64:/numbers/the_answer".

  (4) In the case where the field has a "type" attribute with the
  value being one of the types in (3) that will be used rather than as
  a character array. Specifying the type in the location will override
  this.

  (5) Arrays can be specified as part of the type as either an
  attribute in the XML file or in the location string. To get a five
  element integer array from the example use the location
  "/numbers/array". Multiple dimensions are specified by using a comma
  delimited list in the square brackets (i.e. "INT16[3,2]")

  (6) To get an attribute specify it at the end of a path separated by
  a hash symbol, "#". Therefore to get "3.14" as a single precision
  float the location is "FLOAT32:/best_units#attr2".

Problems with this:

  (1) I have no way of figuring out how to get "9.81" rather than
  "32". The problem is that with a DOM parser the order is not
  guaranteed to be preserved. Does anyone have a good suggestion of
  how to do this? Or are we all comfortable saying that the retriever
  only deals with unique paths? This means that the rest of the
  information is available, but "number/gravity" will give an
  undertermined result.

  (2) I don't have a way to define the type for attributes that come
  automatically (hello in the first example).

P^2]]>
</programlisting>
</example>
-->

</sect2>

</sect1>

</chapter>
